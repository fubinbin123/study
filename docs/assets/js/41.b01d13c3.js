(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{181:function(t,e,a){"use strict";a.r(e);var s=a(0),n=Object(s.a)({},(function(){var t=this.$createElement;this._self._c;return this._m(0)}),[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"content"},[a("h3",{attrs:{id:"楼层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#楼层","aria-hidden":"true"}},[t._v("#")]),t._v(" 楼层")]),t._v(" "),a("h4",{attrs:{id:"tab切换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tab切换","aria-hidden":"true"}},[t._v("#")]),t._v(" tab切换")]),t._v(" "),a("p",[t._v("框架/小程序配置/全局配置（向下拉）--\x3etabBar")]),t._v(" "),a("p",[t._v("在app.json里面设置")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v(' "tabBar": {\n    //字体的颜色\n    "color": "#ccc",\n    //选择状态的字体的颜色\n    "selectedColor": "tomato",\n    //nav导航的位置 只能是top和bottom\n    "position": "bottom",\n    "list": [\n      {//text 为tab切换的按钮的内容\n        "text": "首页",\n        //选中状态时icon图标的路径\n        "selectedIconPath": "./static/index-active.png",\n         //未选中状态时icon图标的路径\n        "iconPath": "./static/index.png",\n        //路由页面的地址\n        "pagePath": "pages/home/home"\n      }\n    ]\n  }\n')])])]),a("h4",{attrs:{id:"scroll"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scroll","aria-hidden":"true"}},[t._v("#")]),t._v(" scroll")]),t._v(" "),a("h5",{attrs:{id:"使用：组件-视图容器-scroll-view"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用：组件-视图容器-scroll-view","aria-hidden":"true"}},[t._v("#")]),t._v(" 使用：组件/视图容器/scroll-view")]),t._v(" "),a("h6",{attrs:{id:"注意：包裹的父元素必须有高度撑开-需要给scroll-view一个固定高度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意：包裹的父元素必须有高度撑开-需要给scroll-view一个固定高度","aria-hidden":"true"}},[t._v("#")]),t._v(" 注意：包裹的父元素必须有高度撑开 需要给scroll-view一个固定高度")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('<scroll-view \n  class="m-scroll-view" \n  scroll-y \n  \x3c!--scroll-into-view的值currentKey为要滚动到的子元素的id（不能以数字开头）--\x3e\n  scroll-into-view="{{currentKey}}" \n  scroll-with-animation \n  bindscroll="handleScroll">\n  \x3c!-- 类名js-list-item用于获取所有外层元素距离顶部的距离 --\x3e\n    <view wx:for="{{dataList}}"\n    \x3c!--子元素的id为每一项的key值--\x3e\n    wx:key="{{index}}" id="{{item.key}}" class="js-list-item">\n      <text class="m-scroll-item-title">{{item.key}}</text>\n      <view wx:for="{{item.row}}" wx:key="{{index}}">\n        <text class="m-scroll-item-text">{{item.name}}</text>\n      </view>\n    </view>\n  </scroll-view>\n  \n  \x3c!--点击右面导航 动态改变currentKey的值--\x3e\n')])])])])}],!1,null,null,null);e.default=n.exports}}]);